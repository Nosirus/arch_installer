#!/bin/bash

# import {{{
if [[ -f "$(pwd)/common" ]]; then
	source common
else
	print_error 'missing file: common'
fi

if [[ -f "$(pwd)/utilities" ]]; then
	source utilities
else
	print_error 'missing file: utilities'
fi
# }}}

check_firmware() { # {{{
	# https://bbs.archlinux.org/viewtopic.php?id=172867
	modprobe -q efivarfs

	if [[ -d "/sys/firmware/efi/" ]]; then
		# Mount efivarfs if it is not already mounted
		if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
			mount -t efivarfs efivarfs /sys/firmware/efi/efivars
		fi
		print_info "UEFI Mode detected"
	else
		print_warning 'This script do not support BIOS Mode. Consider using https://github.com/helmuthdu/aui for more customization'
		enter_to_continue
		exit 1
	fi
}
# }}}
install_requirements() { # {{{
	print_progress 'Install script dependencies'
	
	sed -i 's/#Color/Color/g' /etc/pacman.conf #add color & ILoveCandy
	
	setup_console_font

	# option filter
	install_package 'fzf'
}
# }}}
pre_install() { # {{{
	update_pacman_db
	check_connection
	check_firmware
	install_requirements
}
# }}}

umount_partitions() { # {{{
	print_progress 'Unmounting partitions..'
	local mounted_partitions
	
	mounted_partitions="$(lsblk | grep ${MOUNTPOINT} | awk '{print $7}' | sort -r)"
	swapoff -a
	for i in ${mounted_partitions[@]}; do
		umount $i
	done
}
# }}}
create_partitions() { # {{{
	# select device {{{
	print_title 'PARTITIONS'
	print_partitions
	echo
	echo 'Some suggestions in case future me get lost:'
	echo " - Swap partition: ${CYAN}[Primary]${RESET} ${GREEN}8Gb${RESET} (same as RAM)"
	echo " - Root partition: ${CYAN}[Primary]${RESET} ${GREEN}100Gb${RESET}"
	echo " - Home partition: ${CYAN}[Primary]${RESET} ${GREEN}90Gb${RESET} (virtualbox)"
	echo
	print_warning 'WARNING: If Arch and Windows are dual-booting from same disk, then Arch SHOULD follow the same firmware boot mode and partitioning combination used by the installed Windows in the disk.'
	echo
	echo 'Select device to partition:'

	devices=($(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd\|nvme\|mmcblk'))
	select DEVICE in "${devices[@]}"; do
		if contains_element "${DEVICE}" "${devices[@]}"; then
			break
		else
			invalid_option
		fi
	done
	# }}}
	# modify partition {{{
	cfdisk "$DEVICE"
	# }}}
}
# }}}
format_partitions() { # {{{
	print_partition_info() { # {{{
		print_title 'PARTITIONS'
		print_partitions
		echo
		print_info 'This step will select and format the selected partitions where archlinux will be installed'
		print_danger 'All data on the ROOT and SWAP partition will be LOST.'
	}
	# }}}
	# {{{ set partition to format
	local partitions partition_names format_partition_names partition_number
	
	partitions=($(lsblk -pl | grep 'part' | awk '{print $1}'))
	partition_names=(boot swap root)
	format_partition_names=(root swap) # always format these partitions

	for partition_name in ${partition_names[@]}; do
		if [[ ${#partitions[@]} == 0 ]]; then
			break
		fi

		print_partition_info
		echo "Select ${GREEN}${partition_name}${RESET} partition:"

		select partition in "${partitions[@]}"; do
			if contains_element "${partition}" "${partitions[@]}"; then
				case "$partition_name" in
					boot)
						BOOT_PARTITION="$partition"
						;;
					root)
						ROOT_PARTITION="$partition"
						;;
					swap)
						SWAP_PARTITION="$partition"
						;;
				esac

				# get the selected number - 1
				partition_number=$(($REPLY - 1))
				unset partitions[${partition_number}]
				partitions=(${partitions[@]}) # remove unset variable

				break
			else
				invalid_option
			fi
		done

		if contains_element "${partition_name}" "${format_partition_names[@]}"; then
			continue
		fi

		echo
		confirm "Format partition $partition_name"

		if [[ "$OPTION" == y ]]; then
			case "$partition_name" in
				home)
					FORMAT_HOME_PARTITION=1
					;;
				boot)
					FORMAT_BOOT_PARTITION=1
					;;
			esac
		fi
	done
	# }}}
	# apply changes {{{
	print_partition_info
	echo

	echo "${BLUE}${ROOT_PARTITION}${RESET} ${RED}(btrfs)${RESET} will be formatted and mounted to ${GREEN}${MOUNTPOINT}${RESET}"

	if [[ "$FORMAT_HOME_PARTITION" == 1 ]]; then
		echo "${BLUE}${HOME_PARTITION}${RESET} ${RED}(xfs)${RESET} will be formatted and mounted to ${GREEN}${MOUNTPOINT}/home${RESET}"
	else
		echo "${BLUE}${HOME_PARTITION}${RESET} ${RED}(xfs)${RESET} will be mounted to ${GREEN}${MOUNTPOINT}/home${RESET}"
	fi

	echo "${BLUE}${SWAP_PARTITION}${RESET} ${RED}(swap)${RESET} will be formatted"

	if [[ "$FORMAT_BOOT_PARTITION" == 1 ]]; then
		echo "${BLUE}${BOOT_PARTITION}${RESET} ${RED}(vfat)${RESET} will be formatted and mounted to ${GREEN}${MOUNTPOINT}/boot/efi${RESET}"
	else
		echo "${BLUE}${BOOT_PARTITION}${RESET} ${RED}(vfat)${RESET} will be mounted to ${GREEN}${MOUNTPOINT}/boot/efi${RESET}"
	fi

	echo
	confirm 'Confirm formatting partitions'
	if [[ "$OPTION" == y ]]; then
		if [[ "$FORMAT_BOOT_PARTITION" == 1 ]]; then
			yes | mkfs.vfat -F32 "$BOOT_PARTITION"
			fsck "$BOOT_PARTITION"
		fi

		yes | mkfs.xfs "$ROOT_PARTITION"
		fsck "$ROOT_PARTITION"

		if [[ "$FORMAT_HOME_PARTITION" == 1 ]]; then
			yes | mkfs.xfs "$HOME_PARTITION"
			#yes | mkfs.btrfs -L "Home" "$HOME_PARTITION"
			fsck "$HOME_PARTITION"
		fi

		yes | mkswap "$SWAP_PARTITION"
		mount_partitions
	else
		return
	fi
	# }}}
}
# }}}
mount_partitions() { # {{{
	print_progress 'Mounting partitions..'
	
	#pvcreate "$DEVICE"
	#vgcreate lvm "$DEVICE"
	#lvcreate -C y -L 4G -n swap lvm
	#lvcreate -L 20-n root lvm
	#lvcreate -l100%FREE -n home lvm

	#mount "$ROOT_PARTITION" "$MOUNTPOINT"
	#btrfs subvolume create "$MOUNTPOINT/@"
	#umount "$MOUNTPOINT"
	#mount -o rw,noatime,compress=lzo,space_cache,subvol=@ "$ROOT_PARTITION" "$MOUNTPOINT"
	
	mount "$ROOT_PARTITION" "$MOUNTPOINT"
	
	#mkdir -p "$MOUNTPOINT/home"
	#mount "$HOME_PARTITION" "$MOUNTPOINT/home"

	mkdir -p "$MOUNTPOINT/boot/efi"
	mount "$BOOT_PARTITION" "$MOUNTPOINT/boot/efi"

	swapon "$SWAP_PARTITION"
}
# }}}
setup_partition() { # {{{
	umount_partitions
	create_partitions
	format_partitions
	enter_to_continue
}
# }}}


finish() { # {{{
	print_title "INSTALL COMPLETED"

	print_warning "\nA copy of the AUI will be placed in /root directory of your new system"
	cp -r "$(pwd)" "$MOUNTPOINT/root"

	confirm_yes 'Reboot system'
	if [[ "$OPTION" != n ]]; then
		umount_partitions
		reboot
	fi
	exit 0
}
# }}}

install() { # {{{
	local checklist

	checklist=(0 0 0 0 0 0 0 0 0 0 0 0 0)

	while true; do
		print_title 'ARCHLINUX INSTALLER'

		echo "    1. $(mainmenu_item "${checklist[0]}"  'Partition the disks')"
		echo "    2. $(mainmenu_item "${checklist[1]}" 'Finish')"
		echo

		read -p "Enter option (1-2): " OPTION

		case "$OPTION" in
			1)
				setup_partition
				checklist[0]=1
				;;
			2)
				finish
				checklist[11]=1
				;;
			*)
				invalid_option
				;;
		esac
	done
}
# }}}
main() { # {{{
	pre_install
	install
}
# }}}

main
